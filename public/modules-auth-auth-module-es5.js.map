{"version":3,"sources":["webpack:///src/app/modules/auth/auth-routing.module.ts","webpack:///src/app/modules/auth/auth.module.ts","webpack:///src/app/modules/auth/components/login/login.component.ts","webpack:///src/app/modules/auth/components/login/login.component.html","webpack:///src/app/modules/auth/components/registration/registration.component.ts","webpack:///src/app/modules/auth/components/registration/registration.component.html","webpack:///src/app/modules/auth/services/auth-api.service.ts"],"names":["routes","path","component","data","title","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","providers","LoginComponent","_route","_api","_router","_userService","loginForm","email","required","password","errorMsg","successMsg","hasAuthData","navigate","signup","snapshot","params","sendLogin","value","subscribe","res","token","login","error","msg","onSubmit","selector","templateUrl","styleUrls","RegistrationComponent","registerForm","sendReg","ok","AuthApiService","http","BASE_URL","apiurl","body","post"],"mappings":"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","file":"modules-auth-auth-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { RegistrationComponent } from \"./components/registration/registration.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"registration\",\r\n    component: RegistrationComponent,\r\n    data: { title: \"Регистрация\" },\r\n  },\r\n  {\r\n    path: \"login\",\r\n    component: LoginComponent,\r\n    data: { title: \"Авторизация\" },\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { LoginComponent } from \"./components/login/login.component\";\nimport { RegistrationComponent } from \"./components/registration/registration.component\";\nimport { AuthApiService } from \"./services/auth-api.service\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [LoginComponent, RegistrationComponent],\n  providers: [AuthApiService],\n})\nexport class AuthModule {}","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { UserService } from \"src/app/shared/services/user.service\";\nimport { AuthApiService } from \"../../services/auth-api.service\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"],\n})\nexport class LoginComponent implements OnInit {\n  loginForm = new FormGroup({\n    email: new FormControl(\"\", [Validators.required, Validators.email]),\n    password: new FormControl(\"\", [Validators.required]),\n  });\n\n  errorMsg = \"\";\n\n  successMsg = \"\";\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _api: AuthApiService,\n    private _router: Router,\n    private _userService: UserService\n  ) {}\n\n  ngOnInit() {\n    if (this._userService.hasAuthData()) {\n      this._router.navigate([\"/main/page\"]);\n    }\n    const signup = this._route.snapshot.params[\"ok\"];\n    if (signup === \"1\") {\n      this.successMsg = \"Вы успешно зарегестрировались. Войдите в систему.\";\n    }\n  }\n\n  onSubmit() {\n    this._api\n      .sendLogin({\n        email: this.loginForm.value.email,\n        password: this.loginForm.value.password,\n      })\n      .subscribe((res) => {\n        if ((res as { token: string; userId: string; email: string }).token) {\n          this._userService.login(res);\n          return this._router.navigate([\"/main/page\"]);\n        }\n        if ((res as { error: { msg: string } }).error.msg) {\n          this.errorMsg = (res as { error: { msg: string } }).error.msg;\n        }\n      });\n  }\n}\n","<div class=\"main-block\">\n  <form class=\"info\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <span\n      class=\"info__header\"\n      style=\"margin-bottom: 20px; font-size: 22px; font-weight: 600\"\n      >Вход</span\n    >\n    <input\n      formControlName=\"email\"\n      type=\"text\"\n      placeholder=\"email\"\n      class=\"form-control\"\n    />\n    <input\n      formControlName=\"password\"\n      type=\"password\"\n      placeholder=\"password\"\n      class=\"form-control\"\n    />\n    <button\n      [disabled]=\"!loginForm.valid\"\n      type=\"submit\"\n      class=\"btn btn-outline-primary\"\n    >\n      Войти\n    </button>\n    <span style=\"margin-top: 20px\" class=\"error\" *ngIf=\"errorMsg\">\n      {{ errorMsg }}\n    </span>\n    <span style=\"margin-top: 20px\" class=\"success\">{{ successMsg }}</span>\n  </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { UserService } from \"src/app/shared/services/user.service\";\nimport { AuthApiService } from \"../../services/auth-api.service\";\n\n@Component({\n  selector: \"app-registration\",\n  templateUrl: \"./registration.component.html\",\n  styleUrls: [\"./registration.component.scss\"],\n})\nexport class RegistrationComponent implements OnInit {\n  registerForm = new FormGroup({\n    email: new FormControl(\"\", [Validators.required, Validators.email]),\n    password: new FormControl(\"\", [Validators.required]),\n  });\n\n  errorMsg = \"\";\n\n  constructor(\n    private _api: AuthApiService,\n    private _router: Router,\n    private _userService: UserService\n  ) {}\n\n  ngOnInit() {\n    if (this._userService.hasAuthData()) {\n      this._router.navigate([\"/main/page/\"]);\n    }\n  }\n\n  onSubmit() {\n    this._api\n      .sendReg({\n        email: this.registerForm.value.email,\n        password: this.registerForm.value.password,\n      })\n      .subscribe((res) => {\n        if ((res as { ok: number }).ok) {\n          return this._router.navigate([\"/auth/login\", { ok: 1 }]);\n        }\n        if ((res as { error: { msg: string } }).error.msg) {\n          this.errorMsg = (res as { error: { msg: string } }).error.msg;\n        }\n      });\n  }\n}\n","<div class=\"main-block\">\n  <form class=\"info\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n    <span\n      style=\"margin-bottom: 20px; font-size: 22px; font-weight: 600\"\n      class=\"info__header\"\n      >Регистрация</span\n    >\n    <input\n      formControlName=\"email\"\n      type=\"text\"\n      placeholder=\"email\"\n      class=\"form-control\"\n    />\n    <input\n      formControlName=\"password\"\n      type=\"password\"\n      placeholder=\"password\"\n      class=\"form-control\"\n      style=\"margin-bottom: 20px\"\n    />\n    <button\n      [disabled]=\"!registerForm.valid\"\n      type=\"submit\"\n      class=\"btn btn-outline-primary\"\n    >\n      Зарегестрироваться\n    </button>\n    <span style=\"margin-top: 20px\" class=\"error\" *ngIf=\"errorMsg\">\n      {{ errorMsg }}\n    </span>\n  </form>\n</div>\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { ILogin, IReg } from \"../interfaces/auth\";\n\n@Injectable()\nexport class AuthApiService {\n  constructor(private http: HttpClient) {}\n\n  private readonly BASE_URL = environment.apiurl;\n\n  sendReg(body: IReg): Observable<{ ok: 1 } | { error: { msg: string } }> {\n    return this.http.post<{ ok: 1 } | { error: { msg: string } }>(\n      `${this.BASE_URL}/api/auth/registration`,\n      body\n    );\n  }\n\n  sendLogin(\n    body: ILogin\n  ): Observable<\n    | { token: string; userId: string; email: string }\n    | { error: { msg: string } }\n  > {\n    return this.http.post<\n      | { token: string; userId: string; email: string }\n      | { error: { msg: string } }\n    >(`${this.BASE_URL}/api/auth/login`, body);\n  }\n}\n"]}